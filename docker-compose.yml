# Adapted from this DigitalOcean tutorial:
# https://www.digitalocean.com/community/tutorials/containerizing-a-ruby-on-rails-application-for-development-with-docker-compose
# ...as well as from these guides:
# https://www.codewithjason.com/dockerize-rails-application/
# https://evilmartians.com/chronicles/ruby-on-whales-docker-for-ruby-rails-development

version: "3.8"

x-rails: &rails
  build:
    context: ./backend
    dockerfile: Dockerfile
  stdin_open: true
  tty: true
  volumes:
    - ./backend:/app:cached
    - bundle:/usr/local/bundle
  env_file: ./backend/.env
  environment:
    RAILS_ENV: "${RAILS_ENV:-development}"
    SEARCHER_BASE_URL: "http://searx:8080"
  #
  # From "Ruby on Whales":
  #
  #   We also _tell_ Docker to use tmpfs for `/tmp` folder within a container
  #   and also for the `tmp/pids` folder of our application--this way we
  #   ensure that no `server.pid` survives the container exit (say good-bye to
  #   "A server is already started" errors):
  #
  tmpfs:
    - /tmp
    - /app/tmp/pids

services:
  rails_runner:
    <<: *rails
    stdin_open: true
    tty: true
    depends_on:
      - postgres
      - redis
    ports:
      - "9876:9876" # for pry-remote
    profiles:
      - debug
    entrypoint: ./entrypoints/rails-runner-entrypoint.sh

  backend:
    <<: *rails
    stdin_open: true
    tty: true
    depends_on:
      - postgres
      - redis
    ports:
      - "3000:3000"
      - "9876:9876" # for pry-remote

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    stdin_open: true
    tty: true
    ports:
      - "8080:8080"
    volumes:
      - ./frontend:/app:cached
      - node_modules:/app/node_modules
    environment:
      VUE_APP_BACKEND_BASE_URL: "http://localhost:3000"
      VUE_APP_SEARCHER_BASE_URL: "http://localhost:3000" # tunnel through backend

  searx:
    image: searx/searx
    volumes:
      - ./searx:/etc/searx
    environment:
      BASE_URL: "http://localhost:9090/"

  sidekiq:
    <<: *rails
    depends_on:
      - backend
      - postgres
      - redis
    entrypoint: ./entrypoints/sidekiq-entrypoint.sh

  postgres:
    image: postgres:14.1
    restart: always
    volumes:
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
      - db_data:/var/lib/postgresql/data
    env_file: ./backend/.env

  redis:
    image: redis:6.2
    restart: always

volumes:
  bundle:
  db_data:
  node_modules:
